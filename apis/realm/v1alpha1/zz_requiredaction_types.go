/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RequiredActionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RequiredActionParameters struct {

	// +kubebuilder:validation:Required
	Alias *string `json:"alias" tf:"alias,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultAction *bool `json:"defaultAction,omitempty" tf:"default_action,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`
}

// RequiredActionSpec defines the desired state of RequiredAction
type RequiredActionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RequiredActionParameters `json:"forProvider"`
}

// RequiredActionStatus defines the observed state of RequiredAction.
type RequiredActionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RequiredActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RequiredAction is the Schema for the RequiredActions API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type RequiredAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RequiredActionSpec   `json:"spec"`
	Status            RequiredActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RequiredActionList contains a list of RequiredActions
type RequiredActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RequiredAction `json:"items"`
}

// Repository type metadata.
var (
	RequiredAction_Kind             = "RequiredAction"
	RequiredAction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RequiredAction_Kind}.String()
	RequiredAction_KindAPIVersion   = RequiredAction_Kind + "." + CRDGroupVersion.String()
	RequiredAction_GroupVersionKind = CRDGroupVersion.WithKind(RequiredAction_Kind)
)

func init() {
	SchemeBuilder.Register(&RequiredAction{}, &RequiredActionList{})
}
